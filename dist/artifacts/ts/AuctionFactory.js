"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionFactoryInstance = exports.AuctionFactory = void 0;
const web3_1 = require("@alephium/web3");
const AuctionFactory_ral_json_1 = __importDefault(require("../auctions/AuctionFactory.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { CreateAuction: 0, BidAuction: 1, RedeemAuction: 2 };
        this.consts = { AuctionCodes: { NotAdmin: BigInt("0") } };
        this.tests = {
            getLoanFactoryId: async (params) => {
                return (0, web3_1.testMethod)(this, "getLoanFactoryId", params, contracts_1.getContractByCodeHash);
            },
            createAuction: async (params) => {
                return (0, web3_1.testMethod)(this, "createAuction", params, contracts_1.getContractByCodeHash);
            },
            bid: async (params) => {
                return (0, web3_1.testMethod)(this, "bid", params, contracts_1.getContractByCodeHash);
            },
            redeem: async (params) => {
                return (0, web3_1.testMethod)(this, "redeem", params, contracts_1.getContractByCodeHash);
            },
            editRate: async (params) => {
                return (0, web3_1.testMethod)(this, "editRate", params, contracts_1.getContractByCodeHash);
            },
            editLoanFactory: async (params) => {
                return (0, web3_1.testMethod)(this, "editLoanFactory", params, contracts_1.getContractByCodeHash);
            },
            updateAuctionFactoryCode: async (params) => {
                return (0, web3_1.testMethod)(this, "updateAuctionFactoryCode", params, contracts_1.getContractByCodeHash);
            },
            updateAuctionFactoryFields: async (params) => {
                return (0, web3_1.testMethod)(this, "updateAuctionFactoryFields", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new AuctionFactoryInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.AuctionFactory = new Factory(web3_1.Contract.fromJson(AuctionFactory_ral_json_1.default, "", "c6233af7df42d52e3e1babfe7fceaa4a54d08b4351f1f2bba19207709629ab68", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.AuctionFactory);
// Use this class to interact with the blockchain
class AuctionFactoryInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getLoanFactoryId: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "getLoanFactoryId", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            createAuction: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "createAuction", params, contracts_1.getContractByCodeHash);
            },
            bid: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "bid", params, contracts_1.getContractByCodeHash);
            },
            redeem: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "redeem", params, contracts_1.getContractByCodeHash);
            },
            editRate: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "editRate", params, contracts_1.getContractByCodeHash);
            },
            editLoanFactory: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "editLoanFactory", params, contracts_1.getContractByCodeHash);
            },
            updateAuctionFactoryCode: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "updateAuctionFactoryCode", params, contracts_1.getContractByCodeHash);
            },
            updateAuctionFactoryFields: async (params) => {
                return (0, web3_1.callMethod)(exports.AuctionFactory, this, "updateAuctionFactoryFields", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getLoanFactoryId: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "getLoanFactoryId", params);
            },
            createAuction: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "createAuction", params);
            },
            bid: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "bid", params);
            },
            redeem: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "redeem", params);
            },
            editRate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "editRate", params);
            },
            editLoanFactory: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "editLoanFactory", params);
            },
            updateAuctionFactoryCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "updateAuctionFactoryCode", params);
            },
            updateAuctionFactoryFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AuctionFactory, this, "updateAuctionFactoryFields", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.AuctionFactory, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeCreateAuctionEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.AuctionFactory.contract, this, options, "CreateAuction", fromCount);
    }
    subscribeBidAuctionEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.AuctionFactory.contract, this, options, "BidAuction", fromCount);
    }
    subscribeRedeemAuctionEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.AuctionFactory.contract, this, options, "RedeemAuction", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.AuctionFactory.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.AuctionFactory, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.AuctionFactoryInstance = AuctionFactoryInstance;
