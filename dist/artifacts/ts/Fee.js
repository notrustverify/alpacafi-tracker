"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeInstance = exports.Fee = void 0;
const web3_1 = require("@alephium/web3");
const Fee_ral_json_1 = __importDefault(require("../fees/Fee.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.tests = {
            withdrawAsset: async (params) => {
                return (0, web3_1.testMethod)(this, "withdrawAsset", params, contracts_1.getContractByCodeHash);
            },
            depositInCollector: async (params) => {
                return (0, web3_1.testMethod)(this, "depositInCollector", params, contracts_1.getContractByCodeHash);
            },
            destroyFee: async (params) => {
                return (0, web3_1.testMethod)(this, "destroyFee", params, contracts_1.getContractByCodeHash);
            },
            editAdmin: async (params) => {
                return (0, web3_1.testMethod)(this, "editAdmin", params, contracts_1.getContractByCodeHash);
            },
            forceDestroy: async (params) => {
                return (0, web3_1.testMethod)(this, "forceDestroy", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new FeeInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.Fee = new Factory(web3_1.Contract.fromJson(Fee_ral_json_1.default, "", "98d67b72d97568cacc7eb574f5c72b83a5ebc957bb226e74886b17d88b56784c", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.Fee);
// Use this class to interact with the blockchain
class FeeInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            withdrawAsset: async (params) => {
                return (0, web3_1.callMethod)(exports.Fee, this, "withdrawAsset", params, contracts_1.getContractByCodeHash);
            },
            depositInCollector: async (params) => {
                return (0, web3_1.callMethod)(exports.Fee, this, "depositInCollector", params, contracts_1.getContractByCodeHash);
            },
            destroyFee: async (params) => {
                return (0, web3_1.callMethod)(exports.Fee, this, "destroyFee", params, contracts_1.getContractByCodeHash);
            },
            editAdmin: async (params) => {
                return (0, web3_1.callMethod)(exports.Fee, this, "editAdmin", params, contracts_1.getContractByCodeHash);
            },
            forceDestroy: async (params) => {
                return (0, web3_1.callMethod)(exports.Fee, this, "forceDestroy", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            withdrawAsset: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Fee, this, "withdrawAsset", params);
            },
            depositInCollector: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Fee, this, "depositInCollector", params);
            },
            destroyFee: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Fee, this, "destroyFee", params);
            },
            editAdmin: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Fee, this, "editAdmin", params);
            },
            forceDestroy: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Fee, this, "forceDestroy", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Fee, this);
    }
}
exports.FeeInstance = FeeInstance;
