"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoanFactoryInstance = exports.LoanFactory = void 0;
const web3_1 = require("@alephium/web3");
const LoanFactory_ral_json_1 = __importDefault(require("../loans/LoanFactory.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
const web3_2 = require("@alephium/web3");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = {
            NewLoan: 0,
            AcceptedLoan: 1,
            LoanRemoved: 2,
            LoanCanceled: 3,
            LoanLiqWith: 4,
            LoanPayed: 5,
            AddCollateralLoan: 6,
            RemoveCollateralLoan: 7,
            LoanLiquidation: 8,
        };
        this.consts = {
            LoanCodes: { NotAdmin: BigInt("0"), TokenSizeTooSmall: BigInt("1") },
        };
        this.tests = {
            determineCollateralRatio: async (params) => {
                return (0, web3_1.testMethod)(this, "determineCollateralRatio", params, contracts_1.getContractByCodeHash);
            },
            depositFeeCollector: async (params) => {
                return (0, web3_1.testMethod)(this, "depositFeeCollector", params, contracts_1.getContractByCodeHash);
            },
            getRequiredTokens: async (params) => {
                return (0, web3_1.testMethod)(this, "getRequiredTokens", params, contracts_1.getContractByCodeHash);
            },
            checkTokenAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "checkTokenAmount", params, contracts_1.getContractByCodeHash);
            },
            createLoan: async (params) => {
                return (0, web3_1.testMethod)(this, "createLoan", params, contracts_1.getContractByCodeHash);
            },
            accept: async (params) => {
                return (0, web3_1.testMethod)(this, "accept", params, contracts_1.getContractByCodeHash);
            },
            cancel: async (params) => {
                return (0, web3_1.testMethod)(this, "cancel", params, contracts_1.getContractByCodeHash);
            },
            pay: async (params) => {
                return (0, web3_1.testMethod)(this, "pay", params, contracts_1.getContractByCodeHash);
            },
            forfeit: async (params) => {
                return (0, web3_1.testMethod)(this, "forfeit", params, contracts_1.getContractByCodeHash);
            },
            liquidation: async (params) => {
                return (0, web3_1.testMethod)(this, "liquidation", params, contracts_1.getContractByCodeHash);
            },
            addCollateral: async (params) => {
                return (0, web3_1.testMethod)(this, "addCollateral", params, contracts_1.getContractByCodeHash);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.testMethod)(this, "removeCollateral", params, contracts_1.getContractByCodeHash);
            },
            editRate: async (params) => {
                return (0, web3_1.testMethod)(this, "editRate", params, contracts_1.getContractByCodeHash);
            },
            tokenMapping: async (params) => {
                return (0, web3_1.testMethod)(this, "tokenMapping", params, contracts_1.getContractByCodeHash);
            },
            withdrawLoanFactoryFees: async (params) => {
                return (0, web3_1.testMethod)(this, "withdrawLoanFactoryFees", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFactoryCode: async (params) => {
                return (0, web3_1.testMethod)(this, "updateLoanFactoryCode", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFactoryFields: async (params) => {
                return (0, web3_1.testMethod)(this, "updateLoanFactoryFields", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new LoanFactoryInstance(address);
    }
    stateForTest(initFields, asset, address, maps) {
        return this.stateForTest_(initFields, asset, address, maps);
    }
}
// Use this object to test and deploy the contract
exports.LoanFactory = new Factory(web3_1.Contract.fromJson(LoanFactory_ral_json_1.default, "=58+78=2+a=1-3=2+b=1-1=2-2+d0=2966-2+42=31-1+8=60+7a7e0214696e73657274206174206d617020706174683a2000=85-1+2=36+7a7e021472656d6f7665206174206d617020706174683a2000=206", "84c17d5de25a13b384784c765b843bba40b595d0ab6b0e9840d48a572975e8f1", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.LoanFactory);
// Use this class to interact with the blockchain
class LoanFactoryInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.maps = {
            tokenPairs: new web3_2.RalphMap(exports.LoanFactory.contract, this.contractId, "tokenPairs"),
        };
        this.view = {
            determineCollateralRatio: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "determineCollateralRatio", params, contracts_1.getContractByCodeHash);
            },
            depositFeeCollector: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "depositFeeCollector", params, contracts_1.getContractByCodeHash);
            },
            getRequiredTokens: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "getRequiredTokens", params, contracts_1.getContractByCodeHash);
            },
            checkTokenAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "checkTokenAmount", params, contracts_1.getContractByCodeHash);
            },
            createLoan: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "createLoan", params, contracts_1.getContractByCodeHash);
            },
            accept: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "accept", params, contracts_1.getContractByCodeHash);
            },
            cancel: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "cancel", params, contracts_1.getContractByCodeHash);
            },
            pay: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "pay", params, contracts_1.getContractByCodeHash);
            },
            forfeit: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "forfeit", params, contracts_1.getContractByCodeHash);
            },
            liquidation: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "liquidation", params, contracts_1.getContractByCodeHash);
            },
            addCollateral: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "addCollateral", params, contracts_1.getContractByCodeHash);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "removeCollateral", params, contracts_1.getContractByCodeHash);
            },
            editRate: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "editRate", params, contracts_1.getContractByCodeHash);
            },
            tokenMapping: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "tokenMapping", params, contracts_1.getContractByCodeHash);
            },
            withdrawLoanFactoryFees: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "withdrawLoanFactoryFees", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFactoryCode: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "updateLoanFactoryCode", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFactoryFields: async (params) => {
                return (0, web3_1.callMethod)(exports.LoanFactory, this, "updateLoanFactoryFields", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            determineCollateralRatio: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "determineCollateralRatio", params);
            },
            depositFeeCollector: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "depositFeeCollector", params);
            },
            getRequiredTokens: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "getRequiredTokens", params);
            },
            checkTokenAmount: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "checkTokenAmount", params);
            },
            createLoan: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "createLoan", params);
            },
            accept: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "accept", params);
            },
            cancel: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "cancel", params);
            },
            pay: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "pay", params);
            },
            forfeit: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "forfeit", params);
            },
            liquidation: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "liquidation", params);
            },
            addCollateral: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "addCollateral", params);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "removeCollateral", params);
            },
            editRate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "editRate", params);
            },
            tokenMapping: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "tokenMapping", params);
            },
            withdrawLoanFactoryFees: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "withdrawLoanFactoryFees", params);
            },
            updateLoanFactoryCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "updateLoanFactoryCode", params);
            },
            updateLoanFactoryFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.LoanFactory, this, "updateLoanFactoryFields", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.LoanFactory, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeNewLoanEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "NewLoan", fromCount);
    }
    subscribeAcceptedLoanEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "AcceptedLoan", fromCount);
    }
    subscribeLoanRemovedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "LoanRemoved", fromCount);
    }
    subscribeLoanCanceledEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "LoanCanceled", fromCount);
    }
    subscribeLoanLiqWithEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "LoanLiqWith", fromCount);
    }
    subscribeLoanPayedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "LoanPayed", fromCount);
    }
    subscribeAddCollateralLoanEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "AddCollateralLoan", fromCount);
    }
    subscribeRemoveCollateralLoanEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "RemoveCollateralLoan", fromCount);
    }
    subscribeLoanLiquidationEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.LoanFactory.contract, this, options, "LoanLiquidation", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.LoanFactory.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.LoanFactory, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.LoanFactoryInstance = LoanFactoryInstance;
