"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolInstance = exports.Pool = void 0;
const web3_1 = require("@alephium/web3");
const Pool_ral_json_1 = __importDefault(require("../pool-lending/Pool.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { NewDebt: 0, RemoveDebt: 1 };
        this.consts = {
            PoolCodes: {
                CannotDepositZero: BigInt("0"),
                CannotBorrowZero: BigInt("1"),
                InsufficientLiquidity: BigInt("2"),
                InsufficientCollateral: BigInt("3"),
                NoActiveLoan: BigInt("4"),
                NoOverPayment: BigInt("5"),
                WrongDebtPool: BigInt("6"),
                NotOwner: BigInt("7"),
            },
        };
        this.tests = {
            getSymbol: async (params) => {
                return (0, web3_1.testMethod)(this, "getSymbol", params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.testMethod)(this, "getName", params, contracts_1.getContractByCodeHash);
            },
            getDecimals: async (params) => {
                return (0, web3_1.testMethod)(this, "getDecimals", params, contracts_1.getContractByCodeHash);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.testMethod)(this, "getTotalSupply", params, contracts_1.getContractByCodeHash);
            },
            getPoolToken: async (params) => {
                return (0, web3_1.testMethod)(this, "getPoolToken", params, contracts_1.getContractByCodeHash);
            },
            getSPoolToken: async (params) => {
                return (0, web3_1.testMethod)(this, "getSPoolToken", params, contracts_1.getContractByCodeHash);
            },
            getPoolRate: async (params) => {
                return (0, web3_1.testMethod)(this, "getPoolRate", params, contracts_1.getContractByCodeHash);
            },
            determineCollateralRatio: async (params) => {
                return (0, web3_1.testMethod)(this, "determineCollateralRatio", params, contracts_1.getContractByCodeHash);
            },
            determineCollateralAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "determineCollateralAmount", params, contracts_1.getContractByCodeHash);
            },
            getTotalRepayment: async (params) => {
                return (0, web3_1.testMethod)(this, "getTotalRepayment", params, contracts_1.getContractByCodeHash);
            },
            getPoolFee: async (params) => {
                return (0, web3_1.testMethod)(this, "getPoolFee", params, contracts_1.getContractByCodeHash);
            },
            deposit: async (params) => {
                return (0, web3_1.testMethod)(this, "deposit", params, contracts_1.getContractByCodeHash);
            },
            withdraw: async (params) => {
                return (0, web3_1.testMethod)(this, "withdraw", params, contracts_1.getContractByCodeHash);
            },
            borrow: async (params) => {
                return (0, web3_1.testMethod)(this, "borrow", params, contracts_1.getContractByCodeHash);
            },
            repay: async (params) => {
                return (0, web3_1.testMethod)(this, "repay", params, contracts_1.getContractByCodeHash);
            },
            liquidate: async (params) => {
                return (0, web3_1.testMethod)(this, "liquidate", params, contracts_1.getContractByCodeHash);
            },
            collectFees: async (params) => {
                return (0, web3_1.testMethod)(this, "collectFees", params, contracts_1.getContractByCodeHash);
            },
            destoryPool: async (params) => {
                return (0, web3_1.testMethod)(this, "destoryPool", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new PoolInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.Pool = new Factory(web3_1.Contract.fromJson(Pool_ral_json_1.default, "", "0a9ace41598c44188bf5ed4afe1528e5c21da991df7c76f8ed742bad80f73110", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.Pool);
// Use this class to interact with the blockchain
class PoolInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getSymbol: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getSymbol", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getName", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getDecimals: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getDecimals", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getTotalSupply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getPoolToken: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getPoolToken", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getSPoolToken: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getSPoolToken", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getPoolRate: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getPoolRate", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            determineCollateralRatio: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "determineCollateralRatio", params, contracts_1.getContractByCodeHash);
            },
            determineCollateralAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "determineCollateralAmount", params, contracts_1.getContractByCodeHash);
            },
            getTotalRepayment: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getTotalRepayment", params, contracts_1.getContractByCodeHash);
            },
            getPoolFee: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "getPoolFee", params, contracts_1.getContractByCodeHash);
            },
            deposit: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "deposit", params, contracts_1.getContractByCodeHash);
            },
            withdraw: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "withdraw", params, contracts_1.getContractByCodeHash);
            },
            borrow: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "borrow", params, contracts_1.getContractByCodeHash);
            },
            repay: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "repay", params, contracts_1.getContractByCodeHash);
            },
            liquidate: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "liquidate", params, contracts_1.getContractByCodeHash);
            },
            collectFees: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "collectFees", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            destoryPool: async (params) => {
                return (0, web3_1.callMethod)(exports.Pool, this, "destoryPool", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getSymbol: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getSymbol", params);
            },
            getName: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getName", params);
            },
            getDecimals: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getDecimals", params);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getTotalSupply", params);
            },
            getPoolToken: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getPoolToken", params);
            },
            getSPoolToken: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getSPoolToken", params);
            },
            getPoolRate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getPoolRate", params);
            },
            determineCollateralRatio: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "determineCollateralRatio", params);
            },
            determineCollateralAmount: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "determineCollateralAmount", params);
            },
            getTotalRepayment: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getTotalRepayment", params);
            },
            getPoolFee: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "getPoolFee", params);
            },
            deposit: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "deposit", params);
            },
            withdraw: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "withdraw", params);
            },
            borrow: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "borrow", params);
            },
            repay: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "repay", params);
            },
            liquidate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "liquidate", params);
            },
            collectFees: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "collectFees", params);
            },
            destoryPool: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Pool, this, "destoryPool", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Pool, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeNewDebtEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Pool.contract, this, options, "NewDebt", fromCount);
    }
    subscribeRemoveDebtEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Pool.contract, this, options, "RemoveDebt", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.Pool.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.Pool, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.PoolInstance = PoolInstance;
