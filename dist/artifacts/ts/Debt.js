"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebtInstance = exports.Debt = void 0;
const web3_1 = require("@alephium/web3");
const Debt_ral_json_1 = __importDefault(require("../pool-lending/Debt.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.tests = {
            getLoanAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "getLoanAmount", params, contracts_1.getContractByCodeHash);
            },
            getCollateralAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "getCollateralAmount", params, contracts_1.getContractByCodeHash);
            },
            getDebtor: async (params) => {
                return (0, web3_1.testMethod)(this, "getDebtor", params, contracts_1.getContractByCodeHash);
            },
            getParentAddress: async (params) => {
                return (0, web3_1.testMethod)(this, "getParentAddress", params, contracts_1.getContractByCodeHash);
            },
            calculateRepayment: async (params) => {
                return (0, web3_1.testMethod)(this, "calculateRepayment", params, contracts_1.getContractByCodeHash);
            },
            destroyDebt: async (params) => {
                return (0, web3_1.testMethod)(this, "destroyDebt", params, contracts_1.getContractByCodeHash);
            },
            updateDebtCode: async (params) => {
                return (0, web3_1.testMethod)(this, "updateDebtCode", params, contracts_1.getContractByCodeHash);
            },
            updateDebtFields: async (params) => {
                return (0, web3_1.testMethod)(this, "updateDebtFields", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new DebtInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.Debt = new Factory(web3_1.Contract.fromJson(Debt_ral_json_1.default, "", "a96cf3238c74ee885314717d7a67da2869fc5586ecb359cab41d11ec02ed9fc0", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.Debt);
// Use this class to interact with the blockchain
class DebtInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getLoanAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "getLoanAmount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getCollateralAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "getCollateralAmount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getDebtor: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "getDebtor", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getParentAddress: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "getParentAddress", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            calculateRepayment: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "calculateRepayment", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            destroyDebt: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "destroyDebt", params, contracts_1.getContractByCodeHash);
            },
            updateDebtCode: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "updateDebtCode", params, contracts_1.getContractByCodeHash);
            },
            updateDebtFields: async (params) => {
                return (0, web3_1.callMethod)(exports.Debt, this, "updateDebtFields", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getLoanAmount: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "getLoanAmount", params);
            },
            getCollateralAmount: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "getCollateralAmount", params);
            },
            getDebtor: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "getDebtor", params);
            },
            getParentAddress: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "getParentAddress", params);
            },
            calculateRepayment: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "calculateRepayment", params);
            },
            destroyDebt: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "destroyDebt", params);
            },
            updateDebtCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "updateDebtCode", params);
            },
            updateDebtFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Debt, this, "updateDebtFields", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Debt, this);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.Debt, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.DebtInstance = DebtInstance;
