"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadDeployments = loadDeployments;
const _1 = require(".");
const _deployments_mainnet_json_1 = __importDefault(require("../../deployments/.deployments.mainnet.json"));
const _deployments_testnet_json_1 = __importDefault(require("../../deployments/.deployments.testnet.json"));
function toDeployments(json) {
    const contracts = {
        AlpacaFiOracle: json.contracts["AlpacaFiOracle"] === undefined
            ? undefined
            : {
                ...json.contracts["AlpacaFiOracle"],
                contractInstance: _1.AlpacaFiOracle.at(json.contracts["AlpacaFiOracle"].contractInstance.address),
            },
        Loan: json.contracts["Loan"] === undefined
            ? undefined
            : {
                ...json.contracts["Loan"],
                contractInstance: _1.Loan.at(json.contracts["Loan"].contractInstance.address),
            },
        LoanFactory: json.contracts["LoanFactory"] === undefined
            ? undefined
            : {
                ...json.contracts["LoanFactory"],
                contractInstance: _1.LoanFactory.at(json.contracts["LoanFactory"].contractInstance.address),
            },
        Auction: json.contracts["Auction"] === undefined
            ? undefined
            : {
                ...json.contracts["Auction"],
                contractInstance: _1.Auction.at(json.contracts["Auction"].contractInstance.address),
            },
        AuctionFactory: json.contracts["AuctionFactory"] === undefined
            ? undefined
            : {
                ...json.contracts["AuctionFactory"],
                contractInstance: _1.AuctionFactory.at(json.contracts["AuctionFactory"].contractInstance.address),
            },
        Fee: json.contracts["Fee"] === undefined
            ? undefined
            : {
                ...json.contracts["Fee"],
                contractInstance: _1.Fee.at(json.contracts["Fee"].contractInstance.address),
            },
        TokenTest: json.contracts["TokenTest"] === undefined
            ? undefined
            : {
                ...json.contracts["TokenTest"],
                contractInstance: _1.TokenTest.at(json.contracts["TokenTest"].contractInstance.address),
            },
        Debt: json.contracts["Debt"] === undefined
            ? undefined
            : {
                ...json.contracts["Debt"],
                contractInstance: _1.Debt.at(json.contracts["Debt"].contractInstance.address),
            },
        Pool: json.contracts["Pool"] === undefined
            ? undefined
            : {
                ...json.contracts["Pool"],
                contractInstance: _1.Pool.at(json.contracts["Pool"].contractInstance.address),
            },
    };
    return {
        ...json,
        contracts: contracts,
    };
}
function loadDeployments(networkId, deployerAddress) {
    const deployments = networkId === "mainnet"
        ? _deployments_mainnet_json_1.default
        : networkId === "testnet"
            ? _deployments_testnet_json_1.default
            : undefined;
    if (deployments === undefined) {
        throw Error("The contract has not been deployed to the " + networkId);
    }
    const allDeployments = Array.isArray(deployments)
        ? deployments
        : [deployments];
    if (deployerAddress === undefined) {
        if (allDeployments.length > 1) {
            throw Error("The contract has been deployed multiple times on " +
                networkId +
                ", please specify the deployer address");
        }
        else {
            return toDeployments(allDeployments[0]);
        }
    }
    const result = allDeployments.find((d) => d.deployerAddress === deployerAddress);
    if (result === undefined) {
        throw Error("The contract deployment result does not exist");
    }
    return toDeployments(result);
}
