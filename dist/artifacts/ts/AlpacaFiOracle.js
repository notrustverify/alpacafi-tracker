"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlpacaFiOracleInstance = exports.AlpacaFiOracle = void 0;
const web3_1 = require("@alephium/web3");
const AlpacaFiOracle_ral_json_1 = __importDefault(require("../oracle/AlpacaFiOracle.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
const web3_2 = require("@alephium/web3");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.tests = {
            getValue: async (params) => {
                return (0, web3_1.testMethod)(this, "getValue", params, contracts_1.getContractByCodeHash);
            },
            insertPair: async (params) => {
                return (0, web3_1.testMethod)(this, "insertPair", params, contracts_1.getContractByCodeHash);
            },
            removePair: async (params) => {
                return (0, web3_1.testMethod)(this, "removePair", params, contracts_1.getContractByCodeHash);
            },
            updatePair: async (params) => {
                return (0, web3_1.testMethod)(this, "updatePair", params, contracts_1.getContractByCodeHash);
            },
            updateOracleCode: async (params) => {
                return (0, web3_1.testMethod)(this, "updateOracleCode", params, contracts_1.getContractByCodeHash);
            },
            updateBotAddress: async (params) => {
                return (0, web3_1.testMethod)(this, "updateBotAddress", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new AlpacaFiOracleInstance(address);
    }
    stateForTest(initFields, asset, address, maps) {
        return this.stateForTest_(initFields, asset, address, maps);
    }
}
// Use this object to test and deploy the contract
exports.AlpacaFiOracle = new Factory(web3_1.Contract.fromJson(AlpacaFiOracle_ral_json_1.default, "=10-4+9=1-1=2-1+d9=1+116=1-3+12a=2-2+3f=155-1+9=82+7a7e0214696e73657274206174206d617020706174683a2000=30+1=1-1=58+7a7e021472656d6f7665206174206d617020706174683a2000=210", "283959a0b1c28e53ce218461de67a4ca4414583686d3120a0ddebcf6993d838b", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.AlpacaFiOracle);
// Use this class to interact with the blockchain
class AlpacaFiOracleInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.maps = {
            prices: new web3_2.RalphMap(exports.AlpacaFiOracle.contract, this.contractId, "prices"),
        };
        this.view = {
            getValue: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "getValue", params, contracts_1.getContractByCodeHash);
            },
            insertPair: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "insertPair", params, contracts_1.getContractByCodeHash);
            },
            removePair: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "removePair", params, contracts_1.getContractByCodeHash);
            },
            updatePair: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "updatePair", params, contracts_1.getContractByCodeHash);
            },
            updateOracleCode: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "updateOracleCode", params, contracts_1.getContractByCodeHash);
            },
            updateBotAddress: async (params) => {
                return (0, web3_1.callMethod)(exports.AlpacaFiOracle, this, "updateBotAddress", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getValue: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "getValue", params);
            },
            insertPair: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "insertPair", params);
            },
            removePair: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "removePair", params);
            },
            updatePair: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "updatePair", params);
            },
            updateOracleCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "updateOracleCode", params);
            },
            updateBotAddress: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.AlpacaFiOracle, this, "updateBotAddress", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.AlpacaFiOracle, this);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.AlpacaFiOracle, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.AlpacaFiOracleInstance = AlpacaFiOracleInstance;
