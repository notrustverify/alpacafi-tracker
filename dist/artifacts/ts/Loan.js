"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoanInstance = exports.Loan = void 0;
const web3_1 = require("@alephium/web3");
const Loan_ral_json_1 = __importDefault(require("../loans/Loan.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.consts = {
            Loan: {
                AuctionEnded: BigInt("0"),
                InvalidCaller: BigInt("1"),
                AuctionActive: BigInt("2"),
            },
        };
        this.tests = {
            getTokenRequested: async (params) => {
                return (0, web3_1.testMethod)(this, "getTokenRequested", params, contracts_1.getContractByCodeHash);
            },
            getTokenCollateral: async (params) => {
                return (0, web3_1.testMethod)(this, "getTokenCollateral", params, contracts_1.getContractByCodeHash);
            },
            canLoanLiquidate: async (params) => {
                return (0, web3_1.testMethod)(this, "canLoanLiquidate", params, contracts_1.getContractByCodeHash);
            },
            getBorrower: async (params) => {
                return (0, web3_1.testMethod)(this, "getBorrower", params, contracts_1.getContractByCodeHash);
            },
            isLoanComplete: async (params) => {
                return (0, web3_1.testMethod)(this, "isLoanComplete", params, contracts_1.getContractByCodeHash);
            },
            getInterest: async (params) => {
                return (0, web3_1.testMethod)(this, "getInterest", params, contracts_1.getContractByCodeHash);
            },
            getCommission: async (params) => {
                return (0, web3_1.testMethod)(this, "getCommission", params, contracts_1.getContractByCodeHash);
            },
            acceptLoan: async (params) => {
                return (0, web3_1.testMethod)(this, "acceptLoan", params, contracts_1.getContractByCodeHash);
            },
            cancelLoan: async (params) => {
                return (0, web3_1.testMethod)(this, "cancelLoan", params, contracts_1.getContractByCodeHash);
            },
            forceCancel: async (params) => {
                return (0, web3_1.testMethod)(this, "forceCancel", params, contracts_1.getContractByCodeHash);
            },
            payLoan: async (params) => {
                return (0, web3_1.testMethod)(this, "payLoan", params, contracts_1.getContractByCodeHash);
            },
            forfeit: async (params) => {
                return (0, web3_1.testMethod)(this, "forfeit", params, contracts_1.getContractByCodeHash);
            },
            addCollateral: async (params) => {
                return (0, web3_1.testMethod)(this, "addCollateral", params, contracts_1.getContractByCodeHash);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.testMethod)(this, "removeCollateral", params, contracts_1.getContractByCodeHash);
            },
            activateLiquidation: async (params) => {
                return (0, web3_1.testMethod)(this, "activateLiquidation", params, contracts_1.getContractByCodeHash);
            },
            updateLoanCode: async (params) => {
                return (0, web3_1.testMethod)(this, "updateLoanCode", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFields: async (params) => {
                return (0, web3_1.testMethod)(this, "updateLoanFields", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new LoanInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.Loan = new Factory(web3_1.Contract.fromJson(Loan_ral_json_1.default, "", "3efd7397fddac9e23750a8b6c7645e5a08b29ca59303022be89ccaaf4afae06d", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.Loan);
// Use this class to interact with the blockchain
class LoanInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getTokenRequested: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "getTokenRequested", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTokenCollateral: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "getTokenCollateral", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            canLoanLiquidate: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "canLoanLiquidate", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getBorrower: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "getBorrower", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            isLoanComplete: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "isLoanComplete", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getInterest: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "getInterest", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getCommission: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "getCommission", params, contracts_1.getContractByCodeHash);
            },
            acceptLoan: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "acceptLoan", params, contracts_1.getContractByCodeHash);
            },
            cancelLoan: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "cancelLoan", params, contracts_1.getContractByCodeHash);
            },
            forceCancel: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "forceCancel", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            payLoan: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "payLoan", params, contracts_1.getContractByCodeHash);
            },
            forfeit: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "forfeit", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            addCollateral: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "addCollateral", params, contracts_1.getContractByCodeHash);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "removeCollateral", params, contracts_1.getContractByCodeHash);
            },
            activateLiquidation: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "activateLiquidation", params, contracts_1.getContractByCodeHash);
            },
            updateLoanCode: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "updateLoanCode", params, contracts_1.getContractByCodeHash);
            },
            updateLoanFields: async (params) => {
                return (0, web3_1.callMethod)(exports.Loan, this, "updateLoanFields", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getTokenRequested: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "getTokenRequested", params);
            },
            getTokenCollateral: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "getTokenCollateral", params);
            },
            canLoanLiquidate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "canLoanLiquidate", params);
            },
            getBorrower: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "getBorrower", params);
            },
            isLoanComplete: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "isLoanComplete", params);
            },
            getInterest: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "getInterest", params);
            },
            getCommission: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "getCommission", params);
            },
            acceptLoan: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "acceptLoan", params);
            },
            cancelLoan: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "cancelLoan", params);
            },
            forceCancel: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "forceCancel", params);
            },
            payLoan: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "payLoan", params);
            },
            forfeit: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "forfeit", params);
            },
            addCollateral: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "addCollateral", params);
            },
            removeCollateral: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "removeCollateral", params);
            },
            activateLiquidation: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "activateLiquidation", params);
            },
            updateLoanCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "updateLoanCode", params);
            },
            updateLoanFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.Loan, this, "updateLoanFields", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Loan, this);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.Loan, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.LoanInstance = LoanInstance;
